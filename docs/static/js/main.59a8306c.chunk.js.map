{"version":3,"sources":["components/StockChart/utils.js","components/StockChart/StockChart.js","components/CandlePattern/CandlePattern.style.js","components/CandlePattern/candles.js","components/CandlePattern/CandlePattern.js","App.js","index.js"],"names":["timeParse","chartProps","panEvent","zoomEvent","CandleStickChart","props","divRef","React","createRef","this","type","width","data","ratio","xExtents","Date","style","margin","borderRadius","backgroundColor","height","left","right","top","bottom","seriesName","xScale","scaleTime","xAccessor","d","date","id","yExtents","high","low","stroke","close","open","wickStroke","fill","timeIntervalBarWidth","utcMinute","Component","fitWidth","useEffect","length","window","innerWidth","Wrapper","styled","div","ButtonsWrapper","patterns","name","trend","description","useState","Math","floor","random","pattern","setPattern","handleTrendClick","alert","innerHeight","StockChart","Button","onClick","size","variant","v","App","className","CandlePattern","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59a8306c.chunk.js","sourcesContent":["import { tsvParse, csvParse } from  \"d3-dsv\";\nimport { timeParse } from \"d3-time-format\";\n\nfunction parseData(parse) {\n\treturn function(d) {\n\t\td.date = parse(d.date);\n\t\td.open = +d.open;\n\t\td.high = +d.high;\n\t\td.low = +d.low;\n\t\td.close = +d.close;\n\t\td.volume = +d.volume;\n\n\t\treturn d;\n\t};\n}\n\nconst parseDate = timeParse(\"%Y-%m-%d\");\n\nexport function getData() {\n\tconst promiseMSFT = fetch(\"data/MSFT.tsv\")\n\t\t.then(response => response.text())\n\t\t.then(data => tsvParse(data, parseData(parseDate)))\n\treturn promiseMSFT;\n}\n\nexport const chartProps = {\n\tpanEvent: false, // clicar e arrastar\n\tzoomEvent: false\n}","import React, { useEffect, useState } from 'react'\nimport { getData, chartProps } from \"./utils\"\n\nimport { scaleTime } from \"d3-scale\";\nimport { utcMinute, timeInterval, timeHour } from \"d3-time\";\nimport { discontinuousTimeScaleProvider } from \"react-stockcharts/lib/scale\";\n\n\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\nimport { CandlestickSeries } from \"react-stockcharts/lib/series\";\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\nimport { fitWidth } from \"react-stockcharts/lib/helper\";\nimport { last, timeIntervalBarWidth } from \"react-stockcharts/lib/utils\";\n\n\nclass CandleStickChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.divRef = React.createRef();\n    }\n\n\trender() {\n        const { type, width, data, ratio } = this.props;\n\n        data[\"columns\"] = [\"date\", \"open\", \"high\", \"low\", \"close\"]\n\n\n        const xAccessor = d => d.date;\n        \n\t\tconst xExtents = [\n\t\t\tnew Date('2020-01-10T02:00Z'),\n\t\t\tnew Date('2020-01-10T02:04Z')\n        ];\n\n        // const xScaleProvider = discontinuousTimeScaleProvider\n\t\t// \t.inputDateAccessor(d => d.date);\n\n        // const {\n\t\t// \tdata,\n\t\t// \txScale,\n\t\t// \txAccessor,\n\t\t// \tdisplayXAccessor,\n        // } = xScaleProvider(initialData);\n        \n\t\treturn (\n            <div \n                style={{ \n                width: width - 24,\n                margin: '0 auto',\n                // borderBottom: '1px solid white'\n                borderRadius: '3px',\n                backgroundColor: 'rgb(35, 66, 90, 0.3)'\n                // border: '1px solid black'\n            }}>\n                <ChartCanvas \n                    {...chartProps}\n                    height={400}\n                    ratio={ratio}\n                    width={width - 24}\n                    margin={{ left: 32, right: 32, top: 24, bottom: 24 }}\n                    type={type}\n                    seriesName=\"MSFT_1\"\n                    data={data}\n                    xScale={scaleTime()}\n                    xExtents={xExtents}\n                    //yExtents={[0, 20]}\n                    xAccessor={xAccessor}\n                    //displayXAccessor={displayXAccessor}\n                >\n                    <Chart id={1} yExtents={d => [d.high, d.low]}>\n                        {/* <XAxis \n                            axisAt=\"bottom\" \n                            orient=\"bottom\" \n                            ticks={5} \n                            tickStroke=\"#FFFFFF\"\n                            stroke=\"#FFFFFF\"\n                        /> */}\n                        {/* <YAxis \n                            axisAt=\"right\" \n                            orient=\"right\" \n                            ticks={5} \n                            tickStroke=\"#FFFFFF\"\n                            stroke=\"#FFFFFF\"\n                        /> */}\n                        \n                        <CandlestickSeries\n                            stroke={d => d.close > d.open ? \"#6BA583\" : \"#DB0000\"}\n                            wickStroke={d => d.close > d.open ? \"#6BA583\" : \"#DB0000\"}\n                            fill={d => d.close > d.open ? \"#6BA583\" : \"#DB0000\"} \n                            width={timeIntervalBarWidth(utcMinute)}\n                        />\n                    </Chart>\n                </ChartCanvas>\n            </div>\n\t\t);\n\t}\n}\n\nCandleStickChart = fitWidth(CandleStickChart);\n\nexport default ({ data }) => {\n    //const [data, setData] = useState([])\n\n    useEffect(() => {\n        // getData().then(data => {\n        //     setData(data)\n        // })\n    }, [])\n\n    return <div>\n        { data.length > 0 && (\n            <CandleStickChart data={data} width={window.innerWidth > 400 ? 400 : window.innerWidth} />\n        )}\n    </div>\n}","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n\n    h1 {\n        font-size: 24px;\n        padding: 24px;\n        --background-color: #04233c;\n    }\n`\n\nexport const ButtonsWrapper = styled.div`\n    display: flex;\n    justify-content: space-around;\n    padding: 24px;\n    --background-color: #04233c;\n`","const UP = 1\nconst DOWN = 2\n\nexport const patterns = [\n    {\n        name: 'Harami de alta',\n        trend: 1,\n        data: [\n            {\n                date: new Date('2020-01-10T02:01Z'),\n                open: 50,\n                high: 52,\n                low: 43,\n                close: 45\n            },\n            {\n                date: new Date('2020-01-10T02:02Z'),\n                open: 47,\n                high: 49,\n                low: 40,\n                close: 42\n            },\n            {\n                date: new Date('2020-01-10T02:03Z'),\n                open: 43.5,\n                high: 46,\n                low: 42.5,\n                close: 45\n            }\n        ],\n        description: `\n            <p>O Harami é também conhecido como \"mulher grávida\" por sua semelhança com essa figura. Ele é formado por um candle maior (candle-mãe) e um candle menor, cujo corpo está integralmente inserido entre os limites do corpo do candle-mãe. Conhecido padrão de reversão, ele costuma aparecer após uma tendência definida. Ele é um caso particular de inside candle e apresenta um alto índice de acerto.</p>\n            <p>Existe o harami de alta, que ocorre após longas tendências de baixa – e têm este nome justamente porque revertem o movimento para cima. E há também o harami de baixa, que ocorrem após longas tendências de alta, revertendo o movimento para baixo.</p>\n        `\n    },\n    {\n        name: 'Harami de baixa',\n        trend: 2,\n        data: [\n            {\n                date: new Date('2020-01-10T02:01Z'),\n                open: 42,\n                high: 50,\n                low: 40,\n                close: 48\n            },\n            {\n                date: new Date('2020-01-10T02:02Z'),\n                open: 46,\n                high: 54,\n                low: 43.5,\n                close: 52\n            },\n            {\n                date: new Date('2020-01-10T02:03Z'),\n                open: 50,\n                high: 52,\n                low: 46,\n                close: 48\n            }\n        ],\n        description: `\n            <p>O Harami é também conhecido como \"mulher grávida\" por sua semelhança com essa figura. Ele é formado por um candle maior (candle-mãe) e um candle menor, cujo corpo está integralmente inserido entre os limites do corpo do candle-mãe. Conhecido padrão de reversão, ele costuma aparecer após uma tendência definida. Ele é um caso particular de inside candle e apresenta um alto índice de acerto.</p>\n            <p>Existe o harami de alta, que ocorre após longas tendências de baixa – e têm este nome justamente porque revertem o movimento para cima. E há também o harami de baixa, que ocorrem após longas tendências de alta, revertendo o movimento para baixo.</p>\n        `\n    }\n]","import React, { useEffect, useState } from 'react'\nimport StockChart from 'components/StockChart'\nimport Button from 'react-bootstrap/Button'\nimport { Wrapper, ButtonsWrapper } from './CandlePattern.style'\nimport { patterns } from './candles';\n\nexport default () => {\n    const [pattern, setPattern] = useState(patterns[Math.floor(Math.random() * patterns.length)])\n\n    const handleTrendClick = (trend) => () => {\n        if (trend === pattern.trend) {\n            alert('Acertou!')\n\n            setPattern(patterns[Math.floor(Math.random() * patterns.length)])\n        } else {\n            alert('Errou!')\n        }\n    }\n\n    return <Wrapper style={{ height: window.innerHeight}}>\n        <h1>Qual a tendência?</h1>\n        \n        <StockChart data={pattern.data} />\n        \n        <ButtonsWrapper>\n            <Button \n                onClick={handleTrendClick(1)}\n                size=\"lg\" \n                variant=\"success\"\n            >\n                Sobe\n            </Button>\n\n            <Button \n                onClick={handleTrendClick(2)}\n                size=\"lg\" v\n                variant=\"danger\"\n            >\n                Desce\n            </Button>\n        </ButtonsWrapper>\n    </Wrapper>\n}","import React from 'react';\nimport CandlePattern from 'components/CandlePattern'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CandlePattern />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}